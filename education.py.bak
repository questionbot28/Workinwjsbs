!11 <subject> [topic]```\nExample: !11 physics waves",
            inline=False
        )

        embed.add_field(
            name="üìó Get Question for Class 12",
            value="```!12 <subject> [topic]```\nExample: !12 chemistry electrochemistry",
            inline=False
        )

        embed.add_field(
            name="üìã List Available Subjects",
            value="```!subjects```\nShows all subjects you can study",
            inline=False
        )

        creator_info = (
            "```ansi\n"
            "[0;35m‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ Creator Information ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì[0m\n"
            "[0;36m‚îÉ     Made with üíñ by:          ‚îÉ[0m\n"
            "[0;33m‚îÉ  Rohanpreet Singh Pathania   ‚îÉ[0m\n"
            "[0;36m‚îÉ     Language: Python üêç      ‚îÉ[0m\n"
            "[0;35m‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ[0m\n"
            "```"
        )

        embed.add_field(
            name="üë®‚Äçüíª Credits",
            value=creator_info,
            inline=False
        )

        embed.set_footer(text="Use these commands to practice and learn! üìö‚ú®")
        await ctx.send(embed=embed)

    def _initialize_user_tracking(self, user_id: int, subject: str):
        """Initialize tracking for a user if not exists"""
        if user_id not in self.user_questions:
            self.user_questions[user_id] = {}
        if subject not in self.user_questions[user_id]:
            self.user_questions[user_id][subject] = {
                'used_questions': set(),
                'last_topic': None,
                'question_count': 0
            }

    async def _get_unique_question(self, user_id: int, subject: str, topic: Optional[str], class_level: int) -> Tuple[Optional[dict], bool]:
        """Get a unique question for the user, returns (question, is_new)"""
        self._initialize_user_tracking(user_id, subject)
        user_data = self.user_questions[user_id][subject]

        # Try to get a stored question first
        for _ in range(3):
            question = self.question_generator.get_stored_question(subject, topic, class_level)
            if question:
                question_key = f"{question['question'][:100]}"
                if question_key not in user_data['used_questions']:
                    user_data['used_questions'].add(question_key)
                    user_data['last_topic'] = topic
                    user_data['question_count'] += 1
                    return question, True

        # If we couldn't get a stored question, try generating a new one
        try:
            question = await self.question_generator.generate_question(subject, topic, class_level)
            if question:
                question_key = f"{question['question'][:100]}"
                if question_key not in user_data['used_questions']:
                    user_data['used_questions'].add(question_key)
                    user_data['last_topic'] = topic
                    user_data['question_count'] += 1
                    return question, True
        except Exception as e:
            self.logger.error(f"Error generating question: {e}")

        return None, False

    @commands.command(name='11')
    async def class_11(self, ctx, subject: str, topic: Optional[str] = None):
        """Get a question for class 11"""
        if ctx.channel.id != 1337669136729243658:
            await ctx.send("‚ùå This command can only be used in the designated channel!")
            return

        try:
            subject = subject.lower()
            question, is_new = await self._get_unique_question(ctx.author.id, subject, topic, 11)

            if question:
                if not is_new:
                    await ctx.send("‚ö†Ô∏è Note: You've seen all available questions for this topic. Generating a new one...")
                await self._send_question(ctx, question)
            else:
                await ctx.send("‚ùå Sorry, I couldn't find a question for that subject/topic.")
        except Exception as e:
            self.logger.error(f"Error in class_11 command: {e}")
            await ctx.send("‚ùå An error occurred while getting your question.")

    @commands.command(name='12')
    async def class_12(self, ctx, subject: str, topic: Optional[str] = None):
        """Get a question for class 12"""
        if ctx.channel.id != 1337669207193682001:
            await ctx.send("‚ùå This command can only be used in the designated channel!")
            return

        try:
            subject = subject.lower()
            question, is_new = await self._get_unique_question(ctx.author.id, subject, topic, 12)

            if question:
                if not is_new:
                    await ctx.send("‚ö†Ô∏è Note: You've seen all available questions for this topic. Generating a new one...")
                await self._send_question(ctx, question)
            else:
                await ctx.send("‚ùå Sorry, I couldn't find a question for that subject/topic.")
        except Exception as e:
            self.logger.error(f"Error in class_12 command: {e}")
            await ctx.send("‚ùå An error occurred while getting your question.")

    async def _send_question(self, ctx, question: dict):
        """Format and send a question"""
        try:
            embed = discord.Embed(
                title="üìù Practice Question",
                description=question['question'],
                color=discord.Color.blue()
            )

            options_text = "\n".join(question['options'])
            embed.add_field(name="Options:", value=f"```{options_text}```", inline=False)

            await ctx.send(embed=embed)

            correct_answer_embed = discord.Embed(
                title="‚úÖ Answer & Explanation",
                color=discord.Color.green()
            )
            correct_answer_embed.add_field(
                name="Correct Answer:",
                value=f"```{question['correct_answer']}```",
                inline=False
            )
            correct_answer_embed.add_field(
                name="Explanation:",
                value=question['explanation'],
                inline=False
            )
            await ctx.send(embed=correct_answer_embed)

        except Exception as e:
            self.logger.error(f"Error sending question: {e}")
            await ctx.send("‚ùå An error occurred while sending the question.")

    @commands.command(name='subjects')
    async def list_subjects(self, ctx):
        """List all available subjects"""
        try:
            subjects = self.question_generator.get_subjects()

            embed = discord.Embed(
                title="üìö Available Subjects",
                description="Here are all the subjects you can study:",
                color=discord.Color.blue()
            )

            subject_list = "\n".join([f"‚Ä¢ {subject.title()}" for subject in subjects])
            embed.add_field(name="Subjects:", value=f"```{subject_list}