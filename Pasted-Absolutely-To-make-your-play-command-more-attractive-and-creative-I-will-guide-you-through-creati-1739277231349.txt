Absolutely! To make your !play command more attractive and creative, I will guide you through creating a detailed message that shows the song's album photo, singer's name, and song's remaining duration. The message will also display the current time/total duration in a visually appealing format.

Here’s how to approach this:

1. Command Message Format

When the !play command is triggered, the bot will display:

Song's Album Art

Song Name

Artist Name

Current Time / Total Duration

Remaining Duration


We'll use Discord Embeds for a clean, formatted message that looks visually appealing.

2. Step-by-Step Breakdown

1. Fetching Song Details

Use the Spotify API (or any other service) to get song metadata like the song name, artist, album art, and duration.



2. Message Format

Create a message that looks like:

Playing: **[Song Name]**
Artist: [Artist Name]
[Album Cover Image]
Progress: [Current Time] / [Total Duration]



3. Update Progress

Continuously update the message with the current progress of the song until it ends.




Code Example

First, let’s set up the basic structure:

import discord
from discord.ext import commands, tasks
import spotipy
from spotipy.oauth2 import SpotifyOAuth
import asyncio

bot = commands.Bot(command_prefix="!")
sp = spotipy.Spotify(auth_manager=SpotifyOAuth(client_id="YOUR_SPOTIFY_CLIENT_ID",
                                                client_secret="YOUR_SPOTIFY_CLIENT_SECRET",
                                                redirect_uri="YOUR_REDIRECT_URI"))

# Create a dictionary to store song details for the currently playing song
current_song = {}

@bot.command()
async def play(ctx, song_name: str):
    # Search for the song on Spotify
    results = sp.search(q=song_name, limit=1)
    track = results['tracks']['items'][0]

    # Get track details
    song_title = track['name']
    artist_name = track['artists'][0]['name']
    album_cover_url = track['album']['images'][0]['url']
    duration_ms = track['duration_ms']
    duration = str(duration_ms // 60000) + ":" + str((duration_ms // 1000) % 60).zfill(2)
    
    # Store the song details
    current_song['song_title'] = song_title
    current_song['artist_name'] = artist_name
    current_song['album_cover_url'] = album_cover_url
    current_song['duration_ms'] = duration_ms
    current_song['start_time'] = asyncio.get_event_loop().time()
    
    # Send an attractive embed message with song details
    embed = discord.Embed(title="Now Playing", description=f"**{song_title}**\n*by {artist_name}*",
                          color=discord.Color.blue())
    embed.set_thumbnail(url=album_cover_url)
    embed.add_field(name="Duration", value=f"0:00 / {duration}")
    embed.set_footer(text="Music Bot")

    message = await ctx.send(embed=embed)

    # Start a task to update the song's progress in real-time
    await update_progress(ctx, message)

async def update_progress(ctx, message):
    while True:
        # Calculate the current time in the song
        elapsed_time = int((asyncio.get_event_loop().time() - current_song['start_time']) * 1000)
        
        if elapsed_time >= current_song['duration_ms']:
            break  # Stop if song has finished

        # Calculate the current time / total duration
        current_time = str(elapsed_time // 60000) + ":" + str((elapsed_time // 1000) % 60).zfill(2)
        total_duration = str(current_song['duration_ms'] // 60000) + ":" + str((current_song['duration_ms'] // 1000) % 60).zfill(2)

        # Update the embed with the current progress
        embed = discord.Embed(title="Now Playing", description=f"**{current_song['song_title']}**\n*by {current_song['artist_name']}*",
                              color=discord.Color.blue())
        embed.set_thumbnail(url=current_song['album_cover_url'])
        embed.add_field(name="Duration", value=f"{current_time} / {total_duration}")
        embed.set_footer(text="Music Bot")

        await message.edit(embed=embed)
        
        await asyncio.sleep(1)  # Update every second

Explanation of Code:

1. Spotify API Integration:

When the !play command is invoked, it fetches song metadata from Spotify.

It grabs the song’s name, artist, album cover, and total duration.



2. Embed Creation:

The bot sends an Embed message that displays the song title, artist, album art, and current song duration.

The set_thumbnail method adds the album art as the thumbnail for the embed.



3. Real-Time Progress Update:

The update_progress function calculates the current time based on how much time has passed since the song started playing.

The embed is updated every second with the current time of the song in the format current time/total duration.



4. Duration Formatting:

The duration is formatted as minutes:seconds (e.g., 2:30).



5. Stop the Loop:

When the song finishes (i.e., the elapsed time exceeds the total duration), the loop breaks.




Final Message Example:

When you type !play shape of you, the bot will send a message like this:


---

Now Playing
Shape of You
by Ed Sheeran
(Album cover image)

Duration
0:00 / 3:53 (as an example)


---

As the song plays, the Duration field will update every second, showing the current time / total duration.


---

Enhancing the Bot Further:

You can customize this further by adding the following:

1. Song Pause/Resume:

Add a command like !pause to pause the song and !resume to resume it. You can display whether the song is paused in the embed.



2. Volume Control:

Add commands like !volume 50 to adjust the volume (between 0-100).



3. Song Skip/Previous:

Add skip and previous commands to navigate between songs in the queue.



4. Custom Reactions:

Use custom emojis to interact with the music controls, such as skipping songs, pausing, or liking a track.




Let me know if you'd like more features or additional functionality!

